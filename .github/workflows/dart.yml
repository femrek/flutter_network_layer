name: Dart Test and Prepare Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # Release tags for the bundle package
  pull_request:
    branches: [ "main" ]

jobs:
  # Analyze the source code then run the tests
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      # Install dependencies for each package
      - name: Install dependencies for core
        run: dart pub get --no-example -C flutter_network_layer_core
      - name: Install dependencies for dio impl
        run: dart pub get --no-example -C flutter_network_layer_dio
      - name: Install dependencies for dart impl
        run: dart pub get --no-example -C flutter_network_layer_dart

      # Verify that the libraries are error-free
      - name: Verify formatting for core
        run: dart format --output=none --set-exit-if-changed flutter_network_layer_core/lib
      - name: Verify formatting for dio impl
        run: dart format --output=none --set-exit-if-changed flutter_network_layer_dio/lib
      - name: Verify formatting for dart impl
        run: dart format --output=none --set-exit-if-changed flutter_network_layer_dart/lib

      # Analyze the source code
      - name: Analyze project source for core
        run: dart analyze flutter_network_layer_core/lib
      - name: Analyze project source for dio impl
        run: dart analyze flutter_network_layer_dio/lib
      - name: Analyze project source for dart impl
        run: dart analyze flutter_network_layer_dart/lib

      # Run tests
      - name: Run root tests
        run: dart test
      - name: Run tests for core
        run: cd flutter_network_layer_core && dart test
      - name: Run tests for dio implementation
        run: cd flutter_network_layer_dio && dart test
      - name: Run tests for dart implementation
        run: cd flutter_network_layer_dart && dart test

  prepare-release:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: determine package name by tag
        id: package_name
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            echo "package_name=" >> $GITHUB_ENV
          else
            echo "::error::Unknown package name"
            exit 1
          fi

      - name: Find if it is prerelease by first number of tag
        id: is_prerelease
        run: |
          if [[ ${{ github.ref_name }} == *v0.* ]]; then
            echo "is_prerelease=true" >> $GITHUB_ENV
          else
            echo "is_prerelease=false" >> $GITHUB_ENV
          fi

      - name: Debug list files
        run: ls -la

      - name: Read CHANGELOG.md
        id: change_log
        run: |
          {
            echo 'change_log<<EOF'
            ./scripts/change_log_reader.py ./CHANGELOG.md ${{ github.ref_name }}
            echo EOF
          } >> "$GITHUB_ENV"
          echo ${{ env.change_log }} > temp_change_log

      - name: Set CHANGELOG.md files
        run: |
          ./scripts/change_log_inserter.py temp_change_log ${{ github.ref_name }} flutter_network_layer_core/CHANGELOG.md 
          ./scripts/change_log_inserter.py temp_change_log ${{ github.ref_name }} flutter_network_layer_dio/CHANGELOG.md 
          ./scripts/change_log_inserter.py temp_change_log ${{ github.ref_name }} flutter_network_layer_dart/CHANGELOG.md 

      - uses: EndBug/add-and-commit@v9
        with:
          add: '**/CHANGELOG.md'
          message: 'Update CHANGELOG.md files for release ${{ github.ref_name }}'
          default_author: github_actions
          push: true
          branch: main
          allow_empty_commit: true

  pd-publish:
    needs: prepare-release
    permissions:
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies for core
        run: |
          cd flutter_network_layer_core
          dart pub get --no-example

      - name: Install dependencies for dio
        run: |
          cd flutter_network_layer_dio
          dart pub get --no-example

      - name: Install dependencies for dart
        run: |
          cd flutter_network_layer_dart
          dart pub get --no-example

      - name: Publish core
        run: |
          cd flutter_network_layer_core
          dart pub publish --force

      - name: Publish dio
        run: |
          cd flutter_network_layer_dio
          dart pub publish --force

      - name: Publish dart
        run: |
          cd flutter_network_layer_dart
          dart pub publish --force

  gh-release:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Read CHANGELOG.md
        id: change_log
        run: |
          {
            echo 'change_log<<EOF'
            ./scripts/change_log_reader.py ./CHANGELOG.md ${{ github.ref_name }}
            echo EOF
          } >> "$GITHUB_ENV"
          echo ${{ env.change_log }} > change_log.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ env.change_log }}
          draft: false
          prerelease: ${{ steps.is_prerelease.outputs.is_prerelease }}

      - name: Debug package name
        run: |
          echo "Package name is: ${{ env.package_name }}"
