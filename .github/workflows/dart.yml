name: Dart

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # Release tags for the bundle package
      - 'dio_v*' # Release tags for the dio implementation package
      - 'core_v*' # Release tags for the core package
  pull_request:
    branches: [ "main" ]

jobs:
  # Analyze the source code then run the tests
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      # Install dependencies for each package
      - name: Install dependencies for core
        run: dart pub get --no-example -C flutter_network_layer_core
      - name: Install dependencies for dio impl
        run: dart pub get --no-example -C flutter_network_layer_dio
      - name: Install dependencies for bundle
        run: dart pub get --no-example -C flutter_network_layer

      # Verify that the libraries are error free
      - name: Verify formatting for core
        run: dart format --output=none --set-exit-if-changed flutter_network_layer_core/lib
      - name: Verify formatting for dio impl
        run: dart format --output=none --set-exit-if-changed flutter_network_layer_dio/lib
      - name: Verify formatting for bundle
        run: dart format --output=none --set-exit-if-changed flutter_network_layer/lib

      # Analyze the source code
      - name: Analyze project source for core
        run: dart analyze flutter_network_layer_core/lib
      - name: Analyze project source for dio impl
        run: dart analyze flutter_network_layer_dio/lib
      - name: Analyze project source for bundle
        run: dart analyze flutter_network_layer/lib

      # Run tests
      - name: Run tests
        run: cd flutter_network_layer_dio && dart test

  # Create a GitHub release only if it is a tag push
  release:
    needs: test
    runs-on: ubuntu-latest

    # check if it is a tag push
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: determine package name by tag
        id: package_name
        run: |
          if [[ ${{ github.ref }} == refs/tags/dio_v* ]]; then
            echo "package_name=_dio" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == refs/tags/core_v* ]]; then
            echo "package_name=_core" >> $GITHUB_ENV
          elif [[ ${{ github.ref }} == refs/tags/v* ]]; then
            echo "package_name=" >> $GITHUB_ENV
          else
            echo "::error::Unknown package name"
            exit 1
          fi

      - name: Generate release zip
        run: |
          FOLDER_NAME=flutter_network_layer${{ steps.package_name.outputs.package_name }}
          cd ${FOLDER_NAME}
          zip -r ../${FOLDER_NAME}.zip .

      - name: Find if it is prerelease by first number of tag
        id: is_prerelease
        run: |
          if [[ ${{ github.ref_name }} == *v0.* ]]; then
            echo "is_prerelease=true" >> $GITHUB_ENV
          else
            echo "is_prerelease=false" >> $GITHUB_ENV
          fi

      - name: list files
        run: ls -la

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.is_prerelease.outputs.is_prerelease }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.ref_name }}.zip
          asset_name: ${{ github.ref_name }}.zip
          asset_content_type: application/zip
